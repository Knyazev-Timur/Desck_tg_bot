name: Build and deploy workflow
on:
  push:
    branches: ["main"]

jobs:
  build_and_push:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          logout: true

      - name: Build and Push Container
        run: |-
            docker build -t sergdef/timur:${GITHUB_REF_NAME}-${GITHUB_RUN_ID} .
            docker push sergdef/timur:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}

  deploy:
    needs: build_and_push
    runs-on: ubuntu-20.04
    steps:
      - name: Clone Code
        uses: actions/checkout@v3.5.2

      - name: Render configs
        run: |-
          mkdir deploy_ci
          cat docker-compose-ci.yaml | envsubst > deploy_ci/docker-compose.yaml
          cat .env.test | envsubst > deploy_ci/.env

      # ========= BEGIN SSH EXIT ==========
      - name: Copy on Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST}}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "deploy_ci/docker-compose.yaml, deploy_ci/.env"
          target: "deploy_ci"
          strip_components: 1
#
#      # ========== START DOCKER CONTAINER ==========
#      - name: deploy app
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.SSH_USER }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          script: |-
#            whoami
#            cd deploy_ci
#            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker-compose up -d
#
#
#      # ========= REMOVING INACTIVE IMAGES ============
#      - name: Removing Images
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.SSH_USER }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          script: |
#            docker system prune -a -f
#
