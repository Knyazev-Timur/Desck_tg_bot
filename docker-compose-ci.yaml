version: "3.9"

services:
  pgdb:
    # Использование готового образа postgres
    image: postgres:15.2
    # Задание переменных окружения для контейнера с postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${SQL_DB_NAME}
      POSTGRES_USER: ${SQL_DB_USER}
      POSTGRES_PASSWORD: ${SQL_DB_PASSWORD}
    restart: always
     # Задание имени контейнера для сервиса pgdb
    container_name: pgdb
     # Связывание тома с директорией в контейнере для сохранения данных postgres
    volumes:
      - pgdb_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_DB_USER} -d ${SQL_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 15


#  api:
#    image: charfull/cw_docker:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
#    env_file: .env
#    restart: always
#    depends_on:
#      pgdb:
#        condition: service_healthy

  api:
    image: charfull/cw_docker:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    container_name: api
    command: gunicorn todolist.wsgi:application --bind 0.0.0.0:8000
#    env_file: .env
    environment:
      SQL_DB_HOST: pgdb
      SQL_DB_PORT: 5432
      SQL_DB_NAME: ${SQL_DB_NAME}
      SQL_DB_USER: ${SQL_DB_USER}
      SQL_DB_PASSWORD: ${SQL_DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      DEBUG: False
    restart: always
    depends_on:
      pgdb:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - .:/app

#      - ./core:/apt/core
#      - ./todolist:/apt/todolist
#      - ./goals:/apt/goals
#      - django_static:/apt/static

  bot:
    image: charfull/cw_docker:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    container_name: bot

    environment:
      SQL_DB_HOST: pgdb
      SQL_DB_PORT: 5432
      SQL_DB_NAME: ${SQL_DB_NAME}
      SQL_DB_USER: ${SQL_DB_USER}
      SQL_DB_PASSWORD: ${SQL_DB_PASSWORD}
      BOT_TOKEN: ${BOT_TOKEN}
    restart: always
    depends_on:
      pgdb:
        condition: service_healthy
    command: python3 manage.py runbot

  frontend:
    image: sermalenk/skypro-front:lesson-38
    container_name: frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started





volumes:
  pgdb_data:
